/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appSettingsRouteImport } from './routes/(app)/settings'
import { Route as apphomeRouteRouteImport } from './routes/(app)/(home)/route'
import { Route as apphomeIndexRouteImport } from './routes/(app)/(home)/index'
import { Route as appPropertyAddRouteImport } from './routes/(app)/property.add'
import { Route as appPropertyIdRouteImport } from './routes/(app)/property.$id'

const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appSettingsRoute = appSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => appRouteRoute,
} as any)
const apphomeRouteRoute = apphomeRouteRouteImport.update({
  id: '/(home)',
  getParentRoute: () => appRouteRoute,
} as any)
const apphomeIndexRoute = apphomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => apphomeRouteRoute,
} as any)
const appPropertyAddRoute = appPropertyAddRouteImport.update({
  id: '/property/add',
  path: '/property/add',
  getParentRoute: () => appRouteRoute,
} as any)
const appPropertyIdRoute = appPropertyIdRouteImport.update({
  id: '/property/$id',
  path: '/property/$id',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof apphomeIndexRoute
  '/signin': typeof SigninRoute
  '/settings': typeof appSettingsRoute
  '/property/$id': typeof appPropertyIdRoute
  '/property/add': typeof appPropertyAddRoute
}
export interface FileRoutesByTo {
  '/signin': typeof SigninRoute
  '/settings': typeof appSettingsRoute
  '/property/$id': typeof appPropertyIdRoute
  '/property/add': typeof appPropertyAddRoute
  '/': typeof apphomeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/(app)/(home)': typeof apphomeRouteRouteWithChildren
  '/(app)/settings': typeof appSettingsRoute
  '/(app)/property/$id': typeof appPropertyIdRoute
  '/(app)/property/add': typeof appPropertyAddRoute
  '/(app)/(home)/': typeof apphomeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/signin' | '/settings' | '/property/$id' | '/property/add'
  fileRoutesByTo: FileRoutesByTo
  to: '/signin' | '/settings' | '/property/$id' | '/property/add' | '/'
  id:
    | '__root__'
    | '/(app)'
    | '/signin'
    | '/(app)/(home)'
    | '/(app)/settings'
    | '/(app)/property/$id'
    | '/(app)/property/add'
    | '/(app)/(home)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  SigninRoute: typeof SigninRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/settings': {
      id: '/(app)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appSettingsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/(home)': {
      id: '/(app)/(home)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof apphomeRouteRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/(home)/': {
      id: '/(app)/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof apphomeIndexRouteImport
      parentRoute: typeof apphomeRouteRoute
    }
    '/(app)/property/add': {
      id: '/(app)/property/add'
      path: '/property/add'
      fullPath: '/property/add'
      preLoaderRoute: typeof appPropertyAddRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/property/$id': {
      id: '/(app)/property/$id'
      path: '/property/$id'
      fullPath: '/property/$id'
      preLoaderRoute: typeof appPropertyIdRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface apphomeRouteRouteChildren {
  apphomeIndexRoute: typeof apphomeIndexRoute
}

const apphomeRouteRouteChildren: apphomeRouteRouteChildren = {
  apphomeIndexRoute: apphomeIndexRoute,
}

const apphomeRouteRouteWithChildren = apphomeRouteRoute._addFileChildren(
  apphomeRouteRouteChildren,
)

interface appRouteRouteChildren {
  apphomeRouteRoute: typeof apphomeRouteRouteWithChildren
  appSettingsRoute: typeof appSettingsRoute
  appPropertyIdRoute: typeof appPropertyIdRoute
  appPropertyAddRoute: typeof appPropertyAddRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  apphomeRouteRoute: apphomeRouteRouteWithChildren,
  appSettingsRoute: appSettingsRoute,
  appPropertyIdRoute: appPropertyIdRoute,
  appPropertyAddRoute: appPropertyAddRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  SigninRoute: SigninRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
